
name: CI-CD-Final

on:
  push:
   branches:
      - develop
      - main
   

jobs:
  setup-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_DATABASE }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo_pgsql
          tools: composer:v2, phpunit

      - name: Install PHP dependencies
        run: |
          cd "backend"
          composer update
          #composer install --prefer-dist --no-progress --no-suggest
          
      - name: Copy .env file
        run: |
          cd "backend"
          cp .env.example .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          
      - name: Generate key
        run: |
          cd "backend"
          php artisan key:generate
          
      - name: Run migration
        run: |
          cd "backend"
          php artisan migrate
          
  unit-tests:
    runs-on: ubuntu-latest
    needs: setup-backend
    steps:
      
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo_pgsql
          tools: composer:v2, phpunit
      - name: Install PHP dependencies
        run: |
          cd "backend"
          composer update
          #composer install --prefer-dist --no-progress --no-suggest
      - name: Run unit tests
        run: |
          cd "backend"
          php artisan test --testsuite=Unit
  integration-tests:
    runs-on: ubuntu-latest
    needs: setup-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo_pgsql
          tools: composer:v2, phpunit
          
      - name: Install PHP dependencies
        run: |
          cd "backend"
          #composer update
          composer install --prefer-dist --no-progress --no-suggest
          
      - name: Copy .env example
        run: |
          cd "backend"
          cp .env.example .env
        
      - name: Generate key
        run: |
          cd "backend"
          php artisan key:generate
          
      - name: Run integration tests
        run: |
          cd "backend"
          # php artisan test --testsuite=Feature 
     
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          cd frontend  # Change directory to the frontend folder
          npm install
          
      - name: Lint code
        run: |
          cd frontend  # Ensure all commands run in the correct directory
          # npm run lint
          
      - name: Build project
        run: |
          cd frontend
          npm run build 
  security-check:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      
      - name: Install PHP dependencies
        run: |
          cd "backend"
         
          
           #composer update
          composer install --prefer-dist --no-progress --no-suggest
      
      - name: Run security check
        run: |
          cd "backend"
          composer audit

  build-and-push:


  build-and-push-Docker:

    runs-on: ubuntu-latest
    needs: [frontend-test, unit-tests, integration-tests, security-check]  # Ensure tests and security check pass before building images
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build and Push Frontend
        uses: docker/build-push-action@v3
        with:
          context: frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nextgenera:version
          file: frontend/Dockerfile

      - name: Docker Build and Push Backend
        uses: docker/build-push-action@v3
        with:
          context: backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nextgenera:version1
          file: backend/Dockerfile
          
      - name: Docker Build and Push Database
        uses: docker/build-push-action@v3
        with:
          context: backend/DB
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nextgenera:version2

     # - name: Set up Docker Compose
     #   uses: docker/setup-buildx-action@v1

      - name: Pull and push PostgreSQL image
        run: |
          docker pull postgres:16
          docker tag postgres:16 ${{ secrets.DOCKER_USERNAME }}/postgres:postgres
          docker push ${{ secrets.DOCKER_USERNAME }}/postgres:postgres

        
      # - name: Set up Docker Compose
      #   uses: docker/setup-buildx-action@v1

      # - name: Build and push
      #   run: |
      #     docker-compose -f docker-compose.yml build db
      #     docker-compose -f docker-compose.yml push db

  deployment-artifacts-toCloud:
    name: deployment-artifacts-toCloud
    runs-on: ubuntu-latest
    needs: [frontend-test, unit-tests, integration-tests, security-check]
    outputs:
      deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix }}
    steps:
      - uses: actions/checkout@v2

      - name: Compile CSS and JavaScript
        run: |
          npm install
          npm run prod
        working-directory: backend

      - name: Configure PHP 8.2
        uses: shivammathur/setup-php@master
        with:
          php-version: 8.2
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml

      - name: Install Composer Dependencies
        run: |
          #composer update
          composer install --no-dev --no-interaction --prefer-dist
        working-directory: backend

      - name: Create deployment artifact 
        run: |
          cd "backend"
          tar -czf myAPP.tar.gz --exclude=*.git --exclude=node_modules *
      - name: Store artifact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: backend/myAPP.tar.gz

      - name: Export deployment matrix
        id: export-deployment-matrix
        run: |
          JSON="$(cat ./deployment-config.json)"
          JSON="${JSON//'%'/'%25'}"
          JSON="${JSON//$'\n'/'%0A'}"
          JSON="${JSON//$'\r'/'%0D'}"
          echo "::set-output name=deployment-matrix::$JSON"
        working-directory: backend

  prepare-release-on-server:
    runs-on: ubuntu-latest
    needs: deployment-artifacts-toCloud
    strategy:
      matrix:
        server: ${{ fromJson(needs.deployment-artifacts-toCloud.outputs.deployment-matrix) }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: app-build
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          source: myAPP.tar.gz
          target: ${{ matrix.server.path }}/artifacts
      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          script: |
            mkdir -p "${{ matrix.server.path }}/releases/myApp"
            tar xzf ${{ matrix.server.path }}/artifacts/myAPP.tar.gz -C "${{ matrix.server.path }}/releases/myApp"

